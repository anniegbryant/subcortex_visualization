{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Subcortex visualization software","text":"<p>Welcome to the documentation for subcortical visualization software! This python package currently includes the following six subcortical atlases for data visualization in two-dimensional vector graphics:</p> <p></p> <p>More information about these atlases, including the process of rendering the surfaces and tracing the outlines for each, can be found in the <code>atlas_info/</code> directory.</p>"},{"location":"atlas_info/","title":"Atlas information","text":""},{"location":"atlas_info/#aseg-freesurfer","title":"aseg (FreeSurfer)","text":"<p>Reference: Fischl et al. Neuron (2002).</p>"},{"location":"atlas_info/#melbourne-subcortex-atlas-s1","title":"Melbourne Subcortex Atlas (S1)","text":"<p>Reference: Tian et al. Nature Neuroscience (2020).</p>"},{"location":"atlas_info/#melbourne-subcortex-atlas-s2","title":"Melbourne Subcortex Atlas (S2)","text":"<p>Reference: Tian et al. Nature Neuroscience (2020).</p>"},{"location":"atlas_info/#aicha-subcortical-atlas","title":"AICHA subcortical atlas","text":"<p>Reference: Joliot et al. J Neurosci Methods (2015).</p>"},{"location":"atlas_info/#brainnetome-subcortical-atlas","title":"Brainnetome subcortical atlas","text":"<p>Reference: Fan et al. Cerebral Cortex (2016).</p>"},{"location":"atlas_info/#thalamus-nuclei-hcp-atlas","title":"Thalamus Nuclei (HCP) atlas","text":"<p>Reference: Najdenovska et al. Scientific Data (2018).</p>"},{"location":"custom_segmentation/","title":"DIY atlas","text":""},{"location":"custom_segmentation/#usage-example","title":"Usage Example","text":"<p>This package provides six subcortical atlases as a starting point. The workflow can readily be extended to your favorite segmentation atlas, though!  We have a dedicated folder for a custom segmentation pipeline that will walk you through the two key steps:  </p> <ol> <li>Rendering a series of triangulated surface meshes from your parcellation atlas (starting from a .nii.gz volume), using either the <code>nii2mesh</code> or <code>surfice_atlas</code> software, both developed by Chris Rorden; and </li> <li>Tracing the outline of each region in the rendered mesh in vector graphic editing software (we use Inkscape in the tutorial as a powerful and free option), to yield a two-dimensional image of your atlas in scalable vector graphic (.svg) format.</li> </ol> <p>If you use a particular segmentation atlas in your research and would like to visualize data in that atlas in two dimensions, you can follow along with this guide! These are the exact same steps we implemented to generate the segmentation visuals included in this python package for all atlases.</p>"},{"location":"custom_segmentation/#step-1-creating-and-visualizing-a-custom-triangulated-mesh-from-a-volumetric-segmentationparcellation","title":"Step 1. Creating and visualizing a custom triangulated mesh from a volumetric segmentation/parcellation","text":""},{"location":"custom_segmentation/#generating-mesh-files-obj-per-region","title":"Generating mesh files (.obj) per region","text":"<p>First, you'll want to convert from your three-dimensional segmentation atlas (stored as a NIFTI image) to a triangulated mesh rendering. There are many tools out there to accomplish this depending on your preference; here, we'll suggest and walk through two options, both developed by Chris Rorden's lab: <code>nii2mesh</code> or <code>surfice_atlas</code>. If you want a quick and simple mesh generation with outputs that can be viewed interactively in a Jupyter notebook (with control over the color maps, etc), follow along with option 1 (<code>nii2mesh</code> and <code>pyvista</code> combo). If you want smoother mesh generation and more control over properties of the 3D rendering specifically geared towards brain data (and have Matlab), follow along with option 2 (<code>surfice_atlas</code> and <code>Surf Ice</code> combo).</p>"},{"location":"custom_segmentation/#option-1-nii2mesh-pyvista","title":"Option 1: <code>nii2mesh</code> + <code>pyvista</code>","text":"<p>Here, we'll use the <code>nii2mesh</code> tool developed by Chris Rorden:</p> <p></p> <p>The repository for this tool has really helpful documentation as well as a web-based platform that converts a NIFTI volume to a triangulated mesh (.obj) file without any installation or repository cloning. It's an awesome resource, though we'll need to clone the repository to have full (local) access to the functionality needed to generate a mesh per index (i.e., region) in the segmentation volume. Once you clone the repository, it's very straightforward to compile in C++. Here are the steps, as copied from the <code>nii2mesh</code> repository README:</p> <pre><code>git clone https://github.com/neurolabusc/nii2mesh\ncd nii2mesh/src\nmake\n</code></pre> <p>Check that after running <code>make</code>, there is a binary file <code>nii2mesh</code> in the <code>nii2mesh/src/</code> directory, since that's the key function. If everything looks good there, we'll use the <code>nii2mesh</code> program to generate an individual <code>.obj</code> mesh file per region in our segmentation atlas by setting the <code>-a 1</code> flag. For example, if you're using a hippocampal subfield segmentation volume with 10 regions (voxels labeled 1 through 10 accordingly), the below script will generate 10 individual <code>.obj</code> mesh files:</p> <pre><code>nii2mesh my_custom_segmentation.nii.gz -a 1 my_custom_segmentation.obj\n</code></pre>"},{"location":"custom_segmentation/#visualizing-your-mesh-objects","title":"Visualizing your mesh objects","text":"<p>There are a variety of programs that can render the <code>.obj</code> mesh files, including Blender and 3D Slicer, as well as online tools. If you're using a Mac, the Quick Look feature can also interactively render .obj meshes!</p> <p>We've included a simple Jupyter notebook guide to combine and render the meshes into one object that is interactive and color-coded by region:</p> <p></p> <p>If you use this method, we recommend rotating the object until you reach the desired angle(s) for generating your two-dimensional atlas, then exporting as a snapshot PNG image(s) by clicking the 'PNG' icon as shown in the above video.</p>"},{"location":"custom_segmentation/#option-2-surfice_atlas-surf-ice","title":"Option 2: <code>surfice_atlas</code> + <code>Surf Ice</code>","text":"<p>This method will generate one color-coded 3D mesh file (<code>.mz3</code>) for your segmentation, which can then be rendered interactively in the <code>Surf Ice</code> GUI software. There are a few prerequisites for this step, which should be completed before you can crack on with your mesh generation:  </p> <ol> <li> <p>Clone the <code>surfice_atlas</code> repository to your local machine with <code>git clone https://github.com/neurolabusc/surfice_atlas.git</code> </p> </li> <li> <p>Clone the <code>surfice_atlas</code> repository to your local machine with <code>git clone https://github.com/neurolabusc/spmScripts.git</code> </p> </li> <li> <p>Download the latest SPM (Statistical Parametric Mapping) to wherever you store Matlab plugins </p> </li> <li> <p>Download and install the <code>Surf Ice</code> (Version 6) graphical rendering software for your given operating systen from NITRC. </p> </li> </ol> <p>Once you've completed those four steps, we'll generate the <code>.mz3</code> file for an example segmentation in Matlab. First, we'll add the relevant paths to Matlab:</p> <pre><code>addpath('/path/to/github/surfice_atlas/'); % Change to where you cloned surfice_atlas\naddpath('/path/to/github/spmScripts/'); % Change to where you cloned spmScripts\naddpath('/path/to/MATLAB/spm/'); % Change to where you copied the spm folder\n</code></pre> <p>Now, it's a very simple process to convert our atlas segmentation to an <code>.mz3</code> file to read into Surf Ice:</p> <pre><code>our_example_segmentation = '/path/to/example_segmentation.nii.gz';\nlut = '/path/to/github/surfice_atlas/mylut.lut'; % We use the default LUT that came with surfice_atlas, you can create your own\n\nnii_nii2atlas(our_example_segmentation, lut);\n</code></pre> <p>This will generate a file called <code>merge.mz3</code>, which contains color-coded mesh volumes for each region in your example segmentation. Boot up Surf Ice and open the <code>merge.mz3</code> file (using File &gt; Open to select merge.mz3), and you should have a color-coded three-dimensional mesh rendered on your screen.</p> <p></p> <p>If you use this method, we recommend rotating the object until you reach the desired angle(s) for generating your two-dimensional atlas, then taking a screenshot from the medial and lateral perspectives.</p>"},{"location":"custom_segmentation/#tracing-the-outline-of-each-region-in-vector-graphic-editing-software","title":"\ud83c\udfa8 Tracing the outline of each region in vector graphic editing software","text":""},{"location":"custom_segmentation/#creating-outlines-for-each-region","title":"Creating outlines for each region","text":"<p>Next, pour yourself a big mug of coffee to sit and trace the outline of each region in Inkscape (or a similar vector graphic editing program) \u2615\ufe0f We'll walk you through the steps using Inkscape.</p> <p>Open up a new image (.svg) in Inkscape, and import the PNG snapshot generated from the above rendered mesh by either clicking <code>\u2318+I</code> (Mac) or <code>Ctrl+I</code> (Windows), or <code>File &gt; Import</code>. We'll use the 'Freehand lines' tool for tracing, which looks like the following along your toolbar:</p> <p></p> <p>And then go ahead and trace your first region in your image! We recommend setting 'Smoothing' in your top toolbar to around 20 (we use 22.0), which means that you can do a pretty quick first pass at tracing each region and the path won't stick to every bump you draw.</p> <p></p> <p>Once you finish your first trace, if you want to edit any of the points in the path, just double-click on the black line and you can click and drag the points to adjust their spacing. Rinse and repeat: go ahead and trace the outline for all of the regions in your atlas. Once you finish, when you take away the 3D mesh PNG underneath, you should have a set of outlines that resemble a minimalist aesthetic line-art tattoo like so:</p> <p></p>"},{"location":"custom_segmentation/#labeling-each-region-in-the-svg-metadata","title":"Labeling each region in the SVG metadata","text":"<p>After you finish tracing the outline for each region, you can store the name of that region along with the face (medial or lateral) and hemisphere (right or left) to identify that region programmatically in python. In Inkscape, you can accomplish this by selecting a given region (here, the left putamen shown on the lateral face). In the 'Object Properties' pane shown on the right, in the 'Title' text box, you should then put the name of the region (e.g., 'putamen'), face (e.g., 'lateral'), and abbreviation (e.g., 'L'), all as one string separated by underscores, as shown in the screenshot. In other words, for the highlighted region, its Title should be 'putamen_lateral_L':</p> <p></p> <p>Once you add the title to each region, congrats, you've finished creating the vector graphic for the given hemisphere for your custom atlas!</p>"},{"location":"custom_segmentation/#repeating-for-the-other-hemisphere","title":"Repeating for the other hemisphere","text":"<p>You may notice that the above SVG image is saved as 'subcortex_Melbourne_S1_L.svg', which indicates that this file corresponds to:  * subcortex * Melbourne Subcortex Atlas, granularity level 1 (S1) * left hemisphere (L)</p> <p>If your atlas is left-right symmetric, you can just copy-paste the SVG objects into a new file named e.g., 'subcortex_Melbourne_S1_R.svg', making sure you (1) flip the image along the $y$-axis (i.e., left-right mirror) and update each region's Title to end with '_R' rather than '_L'.</p>"},{"location":"custom_segmentation/#combining-the-left-and-right-hemispheres-into-one-image","title":"Combining the left and right hemispheres into one image","text":"<p>Once you have both hemispheres traced, the last step here is to copy-paste the left and right hemisphere vector graphics into the same image for an SVG corresponding to both hemispheres, named e.g. 'subcortex_Melbourne_S1_both.svg'. Make sure all the individual regions have appropriate Title text fields corresponding to the region name, face, and hemisphere.</p> <p></p>"},{"location":"custom_segmentation/#organizing-the-file-structure-correctly-for-your-custom-atlas","title":"\ud83d\uddc2\ufe0f Organizing the file structure correctly for your custom atlas","text":"<p>Once you have all your regions traced in the left and right hemispheres for your segmentation, in the <code>subcortex_visualization/data/</code> folder, make sure you have the following SVG files--in this case, corresponding to the Melbourne S1 subcortical atlas:</p> <ul> <li>subcortex_Melbourne_S1_both.svg</li> <li>subcortex_Melbourne_S1_L.svg</li> <li>subcortex_Melbourne_S1_R.svg</li> </ul>"},{"location":"custom_segmentation/#lookup-tables-to-indicate-the-order-for-drawing-regions","title":"\ud83d\udd0e Lookup tables to indicate the order for drawing regions","text":"<p>Home stretch, you're almost done \ud83c\udfc3\u200d\u2640\ufe0f</p> <p>One of the last steps to get plotting with your custom atlas to create a lookup table for each of the three SVG images (left, right, and both hemispheres). Each table, in .csv format, should have the following four columns:  </p> <ol> <li><code>region</code>: name of the region (e.g., 'accumbens')</li> <li><code>face</code>: which face to plot (e.g., 'lateral')</li> <li><code>plot_order</code>: in which order should this region be plotted? A value of 1 means this region will be drawn first (i.e., on the bottom) and higher values mean the region will be drawn higher in the stack (i.e., closer to the top). This is only relevant if some regions are overlapping and you care about plotting order.</li> <li><code>Hemisphere</code>: which hemisphere the corresponding region belongs to (should be all 'L' for left hemisphere and 'R' for right hemisphere).</li> </ol> <p>Take a look at the examine lookup tables provided for the Melbourne Subcortex Atlas S1 segmentation in the [left hemisphere], [right hemisphere], and both hemispheres to see exactly how these files are organized. In the case of the Melbourne Subcortex Atlas S1 subcortical atlas, this corresponds to three lookup table files:</p> <ul> <li>Melbourne_S1_both_ordering.csv</li> <li>Melbourne_S1_L_ordering.csv</li> <li>Melbourne_S1_R_ordering.csv</li> </ul> <p>And with that, you'll just need to reinstall the python package once you've added your new vector graphics and lookup tables!  That can be accomplished by simply navigating to the base level of this repository and running:</p> <pre><code># Change to where you've cloned this repo\ncd /path/to/github/subcortex_visualization \n\n# To reinstall the subcortex-visualization package\npython3 -m pip install . \n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#direct-installation-from-pypi","title":"Direct installation from PyPI","text":"<p>This package can be installed directly with pip from the PyPI repository:</p> <pre><code>pip install subcortex-visualization\n</code></pre>"},{"location":"installation/#cloning-with-github","title":"Cloning with GitHub","text":"<p>Alternatively, you can clone this repository from GitHub and then install from your local version:</p> <pre><code>git clone https://github.com/anniegbryant/subcortex_visualization.git\ncd subcortex_visualization\npip install .\n</code></pre> <p>This option is good if you want to make any modifications, including adding your own atlas.</p>"},{"location":"tutorial/","title":"Usage","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nimport numpy as np\nimport random\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\n\nfrom subcortex_visualization.plotting import plot_subcortical_data\n</pre> import pandas as pd import numpy as np import random import matplotlib import matplotlib.pyplot as plt import matplotlib.colors as mcolors  from subcortex_visualization.plotting import plot_subcortical_data <p>First, let's create a simple dataframe with the left hemisphere cortical regions, assigning a different value to each region for visual clarity. Note that all data passed to <code>plot_subcortical_data</code> needs to follow the same three-column structure as shown below: <code>region</code> (the name of the subcortical region with the same nomenclature as shown), <code>value</code> (the value to be plotted in the subcortex map), and <code>Hemisphere</code> (either 'L', 'R', or 'both').</p> In\u00a0[2]: Copied! <pre>example_subcortex_data = pd.DataFrame({\"region\": [\"accumbens\", \"amygdala\", \"caudate\", \"hippocampus\", \"pallidum\", \"putamen\", \"thalamus\"], \n                                       \"value\": range(7)}).assign(Hemisphere = \"L\")\n\nexample_subcortex_data\n</pre> example_subcortex_data = pd.DataFrame({\"region\": [\"accumbens\", \"amygdala\", \"caudate\", \"hippocampus\", \"pallidum\", \"putamen\", \"thalamus\"],                                         \"value\": range(7)}).assign(Hemisphere = \"L\")  example_subcortex_data Out[2]: region value Hemisphere 0 accumbens 0 L 1 amygdala 1 L 2 caudate 2 L 3 hippocampus 3 L 4 pallidum 4 L 5 putamen 5 L 6 thalamus 6 L <p>Now, we can plot this data with the <code>plasma</code> colormap as an example in the left cortex. Note the following arguments:</p> <ul> <li><code>subcortex_data</code>: The three-column dataframe shown above</li> <li><code>atlas</code>: The name of the atlas to plot (currently, only 'aseg' is supported)</li> <li><code>line_thickness</code>: How thick the lines around each subcortical region should be drawn, in mm (default is 1.5)</li> <li><code>line_color</code>: What color the lines around each subcortical region should be (default is 'black')</li> <li><code>hemisphere</code>: Which hemisphere ('L' or 'R') the <code>subcortex_data</code> is from; can also be 'both' (default is 'L')</li> <li><code>fill_title</code>: Name to add to legend</li> <li><code>cmap</code>: Name of colormap (e.g., 'plasma' or 'viridis') or a <code>matplotlib.colors.Colormap</code> (default is 'viridis')</li> <li><code>vmin</code>: Min fill value; this is optional, and you would only want to use this to manually constrain the fill range to match another figure</li> <li><code>vmax</code>: Max fill value; this is optional, and you would only want to use this to manually constrain the fill range to match another figure</li> </ul> In\u00a0[3]: Copied! <pre>plot_subcortical_data(subcortex_data=example_subcortex_data, atlas = 'aseg',\n                      line_thickness=1.5, line_color='black',\n                          hemisphere='L', fill_title = \"aseg region index\", cmap='plasma', \n                          vmin=None, vmax=None)\n</pre> plot_subcortical_data(subcortex_data=example_subcortex_data, atlas = 'aseg',                       line_thickness=1.5, line_color='black',                           hemisphere='L', fill_title = \"aseg region index\", cmap='plasma',                            vmin=None, vmax=None) <p>If we wanted to plot this with the <code>inferno</code> color palette instead, just swap out the <code>cmap</code> argument values:</p> In\u00a0[4]: Copied! <pre>plot_subcortical_data(subcortex_data=example_subcortex_data, atlas = 'aseg', \n                      hemisphere='L', fill_title = \"aseg region index\", cmap='inferno')\n</pre> plot_subcortical_data(subcortex_data=example_subcortex_data, atlas = 'aseg',                        hemisphere='L', fill_title = \"aseg region index\", cmap='inferno') <p>By default, <code>plot_subcortical_data</code> will plot the index values of each region, so we actually don't need to pass in a dataframe for this visualization purpose. Here, we can plot the region indices for the Melbourne Subcortex S1 atlas in right hemisphere without passing in any data:</p> In\u00a0[5]: Copied! <pre>plot_subcortical_data(atlas = 'Melbourne_S1', hemisphere='R', \n                      fill_title = \"Melbourne Subcortex S1 atlas region\", \n                      cmap='viridis')\n</pre> plot_subcortical_data(atlas = 'Melbourne_S1', hemisphere='R',                        fill_title = \"Melbourne Subcortex S1 atlas region\",                        cmap='viridis') <p>To plot both hemispheres using gray lines of 2mm thickness, we can set the <code>hemisphere</code> argument to 'both' and adjust the <code>line_thickness</code> and <code>line_color</code> arguments accordingly:</p> In\u00a0[6]: Copied! <pre>plot_subcortical_data(atlas = 'Melbourne_S1', hemisphere='both', \n                      line_color='gray', line_thickness=2,\n                      fill_title = \"Melbourne Subcortex S1 atlas region\", cmap='viridis')\n</pre> plot_subcortical_data(atlas = 'Melbourne_S1', hemisphere='both',                        line_color='gray', line_thickness=2,                       fill_title = \"Melbourne Subcortex S1 atlas region\", cmap='viridis') <p>We can also use the S2 level of granularity from the Melbourne Subcortex (Tian 2020) Atlas:</p> In\u00a0[7]: Copied! <pre>plot_subcortical_data(atlas = 'Melbourne_S2', hemisphere='both', \n                      fill_title = \"Melbourne Subcorte S2 right hemisphere atlas\", cmap='hsv')\n</pre> plot_subcortical_data(atlas = 'Melbourne_S2', hemisphere='both',                        fill_title = \"Melbourne Subcorte S2 right hemisphere atlas\", cmap='hsv') <p>Lastly, let's view the atlas for (1) AICHA subcortex and (2) Brainnetome subcortex:</p> In\u00a0[8]: Copied! <pre># AICHA\nplot_subcortical_data(atlas = 'AICHA', hemisphere='both', \n                      fill_title = \"AICHA subcortex, right hemisphere atlas\", cmap='hsv')\n</pre> # AICHA plot_subcortical_data(atlas = 'AICHA', hemisphere='both',                        fill_title = \"AICHA subcortex, right hemisphere atlas\", cmap='hsv') In\u00a0[9]: Copied! <pre># AICHA\nplot_subcortical_data(atlas = 'Brainnetome', hemisphere='both', \n                      fill_title = \"Brainnetome subcortex, right hemisphere atlas\", cmap='hsv')\n</pre> # AICHA plot_subcortical_data(atlas = 'Brainnetome', hemisphere='both',                        fill_title = \"Brainnetome subcortex, right hemisphere atlas\", cmap='hsv') In\u00a0[10]: Copied! <pre>np.random.seed(127)\n\nexample_continuous_data_L = pd.DataFrame({\"region\": [\"accumbens\", \"amygdala\", \"caudate\", \"hippocampus\", \"pallidum\", \"putamen\", \"thalamus\"],\n                                          \"value\": np.random.normal(0, 1, 7)}).assign(Hemisphere = \"L\")\nexample_continuous_data_R = pd.DataFrame({\"region\": [\"accumbens\", \"amygdala\", \"caudate\", \"hippocampus\", \"pallidum\", \"putamen\", \"thalamus\"],\n                                            \"value\": np.random.normal(0, 1, 7)}).assign(Hemisphere = \"R\")\nexample_continuous_data = pd.concat([example_continuous_data_L, example_continuous_data_R], axis=0)\n\n# See what the left hemisphere data, randomly sampled from a normal distribution, looks like\nexample_continuous_data_L\n</pre> np.random.seed(127)  example_continuous_data_L = pd.DataFrame({\"region\": [\"accumbens\", \"amygdala\", \"caudate\", \"hippocampus\", \"pallidum\", \"putamen\", \"thalamus\"],                                           \"value\": np.random.normal(0, 1, 7)}).assign(Hemisphere = \"L\") example_continuous_data_R = pd.DataFrame({\"region\": [\"accumbens\", \"amygdala\", \"caudate\", \"hippocampus\", \"pallidum\", \"putamen\", \"thalamus\"],                                             \"value\": np.random.normal(0, 1, 7)}).assign(Hemisphere = \"R\") example_continuous_data = pd.concat([example_continuous_data_L, example_continuous_data_R], axis=0)  # See what the left hemisphere data, randomly sampled from a normal distribution, looks like example_continuous_data_L Out[10]: region value Hemisphere 0 accumbens -0.571809 L 1 amygdala 0.029624 L 2 caudate 0.562592 L 3 hippocampus -0.647652 L 4 pallidum -0.845436 L 5 putamen 0.106565 L 6 thalamus 1.732392 L <p>Left hemisphere:</p> In\u00a0[11]: Copied! <pre>plot_subcortical_data(subcortex_data=example_continuous_data_L, \n                      atlas = 'aseg',\n                      hemisphere='L', \n                      fill_title = \"Normal distribution sample, aseg atlas\", \n                      cmap='viridis')\n</pre> plot_subcortical_data(subcortex_data=example_continuous_data_L,                        atlas = 'aseg',                       hemisphere='L',                        fill_title = \"Normal distribution sample, aseg atlas\",                        cmap='viridis') <p>Right hemisphere:</p> In\u00a0[12]: Copied! <pre>plot_subcortical_data(subcortex_data=example_continuous_data_R, \n                      atlas = 'aseg',\n                      hemisphere='R', \n                      fill_title = \"Normal distribution sample, aseg atlas\", \n                      cmap='viridis')\n</pre> plot_subcortical_data(subcortex_data=example_continuous_data_R,                        atlas = 'aseg',                       hemisphere='R',                        fill_title = \"Normal distribution sample, aseg atlas\",                        cmap='viridis') <p>Both hemispheres together:</p> In\u00a0[13]: Copied! <pre>plot_subcortical_data(subcortex_data=example_continuous_data, \n                      atlas = 'aseg', \n                      hemisphere='both', \n                      fill_title = \"Normal distribution sample, aseg atlas\", \n                      cmap='viridis')\n</pre> plot_subcortical_data(subcortex_data=example_continuous_data,                        atlas = 'aseg',                        hemisphere='both',                        fill_title = \"Normal distribution sample, aseg atlas\",                        cmap='viridis') <p>You can pass in a custom colormap too! For example, if you want to fill in with a gradient ranging from white to red:</p> In\u00a0[14]: Copied! <pre>white_to_purple_cmap = mcolors.LinearSegmentedColormap.from_list(\"white_to_purple\", [\"white\", \"purple\"])\n\nplot_subcortical_data(subcortex_data=example_continuous_data, \n                      atlas = 'aseg', \n                      hemisphere='both', \n                      fill_title = \"Normal distribution sample\", \n                      cmap=white_to_purple_cmap)\n</pre> white_to_purple_cmap = mcolors.LinearSegmentedColormap.from_list(\"white_to_purple\", [\"white\", \"purple\"])  plot_subcortical_data(subcortex_data=example_continuous_data,                        atlas = 'aseg',                        hemisphere='both',                        fill_title = \"Normal distribution sample\",                        cmap=white_to_purple_cmap) <p>Since this data has positive and negative values, we can pass in a color palette from blue (negative) to white (0) to red (positive). <code>plot_subcortical_data</code> takes an argument <code>midpoint</code> that specifies the center point for the color palette. Setting this to 0 here enforces the center value to be white. Without setting vmin/vmax explicitly, the color range will be defined symmetrically around <code>midpoint</code> to capture the full range of the data.</p> In\u00a0[15]: Copied! <pre>white_blue_red_cmap = mcolors.LinearSegmentedColormap.from_list(\"BlueWhiteRed\", [\"blue\", \"white\", \"red\"])\n\nplot_subcortical_data(subcortex_data=example_continuous_data, \n                      atlas = 'aseg',  \n                      hemisphere='both', \n                      fill_title = \"Normal distribution sample\", \n                      cmap=white_blue_red_cmap, midpoint=0)\n</pre> white_blue_red_cmap = mcolors.LinearSegmentedColormap.from_list(\"BlueWhiteRed\", [\"blue\", \"white\", \"red\"])  plot_subcortical_data(subcortex_data=example_continuous_data,                        atlas = 'aseg',                         hemisphere='both',                        fill_title = \"Normal distribution sample\",                        cmap=white_blue_red_cmap, midpoint=0)"},{"location":"tutorial/#example-data-just-to-show-the-different-regions","title":"Example data just to show the different regions\u00b6","text":""},{"location":"tutorial/#lets-simulate-and-visualize-some-continuous-data","title":"Let's simulate and visualize some continuous data!\u00b6","text":"<p>Above we just colored each region by index, but now let's simulate some continuous data to demonstrate how you might plot real data (for example, region volume or functional activity) in a given atlas. We'll work with the <code>aseg</code> atlas for simplicity.</p>"}]}